<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This file is required because !(MSBuildExtensionsPath) 
       multi evaluates on Xamarin. This expansion only happens if used directly
       in an import so we cannot set LanguageTargets correctly since
       it'll evaluate the property too early.
  -->

  <ImportGroup Condition="'$(_ExtrasResolvedPlatform)' == 'windowsphone'">
    <Import Project="$(MSBuildProgramFiles32)\MSBuild\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\Microsoft.$(TargetFrameworkIdentifier).$(TargetFrameworkVersion).Overrides.targets" Condition="Exists('$(MSBuildProgramFiles32)\MSBuild\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\Microsoft.$(TargetFrameworkIdentifier).$(TargetFrameworkVersion).Overrides.targets')"  />
    <Import Project="$(MSBuildProgramFiles32)\MSBuild\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\Microsoft.$(TargetFrameworkIdentifier).$(_ExtrasLanguageName).targets" Condition="Exists('$(MSBuildProgramFiles32)\MSBuild\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\Microsoft.$(TargetFrameworkIdentifier).$(_ExtrasLanguageName).targets')"  />
  </ImportGroup>

  <ImportGroup Condition="'$(_ExtrasResolvedPlatform)' == 'windows'">
    <Import Project="$(MSBuildExtensionsPath)\Microsoft\WindowsXaml\v$(_ExtrasVisualStudioVersion)\Microsoft.Windows.UI.Xaml.$(_ExtrasLanguageName).targets" Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\WindowsXaml\v$(_ExtrasVisualStudioVersion)\Microsoft.Windows.UI.Xaml.$(_ExtrasLanguageName).targets')" />
  </ImportGroup>
  
  <ImportGroup Condition="'$(_ExtrasResolvedPlatform)' == 'silverlight'">
    <Import Project="$(MSBuildProgramFiles32)\MSBuild\Microsoft\Silverlight\$(SilverlightVersion)\Microsoft.Silverlight.$(_ExtrasLanguageName).targets" Condition="Exists('$(MSBuildProgramFiles32)\MSBuild\Microsoft\Silverlight\$(SilverlightVersion)\Microsoft.Silverlight.$(_ExtrasLanguageName).targets')"  />
  </ImportGroup>

  <ImportGroup Condition="'$(_ExtrasResolvedPlatform)' == 'portable'">
    <Import Condition="'$(_ExtrasLanguageName)' == 'FSharp' and Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(_ExtrasVisualStudioVersion)\FSharp\Microsoft.Portable.FSharp.Targets')" Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(_ExtrasVisualStudioVersion)\FSharp\Microsoft.Portable.FSharp.Targets" />
    <Import Condition="'$(_ExtrasLanguageName)' != 'FSharp' and Exists('$(MSBuildExtensionsPath)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.$(_ExtrasLanguageName).targets')" Project="$(MSBuildExtensionsPath)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.$(_ExtrasLanguageName).targets" />
  </ImportGroup>

  <ImportGroup Condition="'$(_ExtrasResolvedPlatform)' == 'monoandroid'">
    <Import Project="$(MSBuildExtensionsPath)\Xamarin\Android\Xamarin.Android.$(_ExtrasLanguageName).targets" Condition="Exists('$(MSBuildExtensionsPath)\Xamarin\Android\Xamarin.Android.$(_ExtrasLanguageName).targets')"  />
  </ImportGroup>

  <ImportGroup Condition="'$(_ExtrasResolvedPlatform)' == 'xamarinios'">
    <Import Project="$(MSBuildExtensionsPath)\Xamarin\iOS\Xamarin.iOS.$(_ExtrasLanguageName).targets" Condition="Exists('$(MSBuildExtensionsPath)\Xamarin\iOS\Xamarin.iOS.$(_ExtrasLanguageName).targets')"  />
  </ImportGroup>

  <ImportGroup Condition="'$(_ExtrasResolvedPlatform)' == 'xamarinmac'">
    <Import Project="$(MSBuildExtensionsPath)\Xamarin\Mac\Xamarin.Mac.$(_ExtrasLanguageName).targets" Condition="Exists('$(MSBuildExtensionsPath)\Xamarin\Mac\Xamarin.Mac.$(_ExtrasLanguageName).targets')"  />
  </ImportGroup>

  <ImportGroup Condition="'$(_ExtrasResolvedPlatform)' == 'xamarintvos'">
    <Import Project="$(MSBuildExtensionsPath)\Xamarin\TVOS\Xamarin.TVOS.$(_ExtrasLanguageName).targets" Condition="Exists('$(MSBuildExtensionsPath)\Xamarin\TVOS\Xamarin.TVOS.$(_ExtrasLanguageName).targets')"  />
  </ImportGroup>

  <ImportGroup Condition="'$(_ExtrasResolvedPlatform)' == 'xamarinwatchos'">
    <Import Project="$(MSBuildExtensionsPath)\Xamarin\WatchOS\Xamarin.WatchOS.$(_ExtrasLanguageName).targets" Condition="Exists('$(MSBuildExtensionsPath)\Xamarin\WatchOS\Xamarin.WatchOS.$(_ExtrasLanguageName).targets')"  />
  </ImportGroup>

  <!-- Need to detect if the expected targets where actually imported and reset to common if not -->
  <PropertyGroup>
    <_ExtrasMissingLangTargets Condition="$(MSBuildAllProjects.Contains('Microsoft.Common.CurrentVersion.targets')) ">false</_ExtrasMissingLangTargets>
    <_ExtrasMissingLangTargets Condition="'$(_ExtrasMissingLangTargets)' == ''">true</_ExtrasMissingLangTargets>
  </PropertyGroup>


  <!-- Check to see if the Lang targets exist and if not, trigger an error on Compile -->
  <!-- We clear out the lang targets so the defaults are used for the error to show -->
  <PropertyGroup Condition="'$(_ExtrasSkipTargetsCheck)' != 'true' and '$(_ExtrasMissingLangTargets)' == 'true' ">
    <_ExtrasMissingLangTargets>true</_ExtrasMissingLangTargets>
    <_ExtrasLangTargets>$(LanguageTargets)</_ExtrasLangTargets>
    
    <!-- Reset LanguageTargets Eval-->
    <!-- https://github.com/dotnet/sdk/blob/979eed136b786b6e2d77f567eb5a368952982740/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.targets#L28-L37 -->
    <LanguageTargets></LanguageTargets>
    <LanguageTargets Condition="'$(MSBuildProjectExtension)' == '.csproj'">$(MSBuildToolsPath)\Microsoft.CSharp.targets</LanguageTargets>
    <LanguageTargets Condition="'$(MSBuildProjectExtension)' == '.vbproj'">$(MSBuildToolsPath)\Microsoft.VisualBasic.targets</LanguageTargets>
    <LanguageTargets Condition="'$(MSBuildProjectExtension)' == '.fsproj'">$(MicrosoftNETBuildTasksDirectoryRoot)..\build\Microsoft.NET.Sdk.FSharp.targets</LanguageTargets>

    <!-- If LanguageTargets isn't otherwise set, then just import the common targets.  This should allow the restore target to run,
         which could bring in NuGet packages that set the LanguageTargets to something else.  This means support for different
         languages could either be supplied via an SDK or via a NuGet package. -->
    <LanguageTargets Condition="'$(LanguageTargets)' == ''">$(MSBuildToolsPath)\Microsoft.Common.CurrentVersion.targets</LanguageTargets>
  </PropertyGroup>

  
  <!-- Import common targets so NuGet restore succeeds -->
  <!-- https://github.com/dotnet/sdk/blob/979eed136b786b6e2d77f567eb5a368952982740/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.targets#L33 -->
  <Import Condition="'$(_ExtrasMissingLangTargets)' == 'true' " Project="$(LanguageTargets)" />

</Project>